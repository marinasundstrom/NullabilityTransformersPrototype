openapi: 3.0.1
info:
  title: NullabilityTransformersPrototype | v1
  version: 1.0.0
servers:
  - url: http://localhost:5295
paths:
  /Test/Test:
    get:
      tags:
        - Test
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/TestDto"
            application/json:
              schema:
                $ref: "#/components/schemas/TestDto"
            text/json:
              schema:
                $ref: "#/components/schemas/TestDto"
  /Test/Test2:
    get:
      tags:
        - Test
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/TestDto"
            application/json:
              schema:
                $ref: "#/components/schemas/TestDto"
            text/json:
              schema:
                $ref: "#/components/schemas/TestDto"
  /Test/Test3:
    get:
      tags:
        - Test
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/KeyValuePairOfintAndTestDto"
            application/json:
              schema:
                $ref: "#/components/schemas/KeyValuePairOfintAndTestDto"
            text/json:
              schema:
                $ref: "#/components/schemas/KeyValuePairOfintAndTestDto"
  /Test/Test32:
    get:
      tags:
        - Test
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/KeyValuePairOfintAndTestDto"
            application/json:
              schema:
                $ref: "#/components/schemas/KeyValuePairOfintAndTestDto"
            text/json:
              schema:
                $ref: "#/components/schemas/KeyValuePairOfintAndTestDto"
  /Test/T1:
    post:
      tags:
        - Test
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TestDto"
          text/json:
            schema:
              $ref: "#/components/schemas/TestDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/TestDto"
        required: true
      responses:
        "200":
          description: OK
  /Test/T2:
    post:
      tags:
        - Test
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TestDto2"
          text/json:
            schema:
              $ref: "#/components/schemas/TestDto2"
          application/*+json:
            schema:
              $ref: "#/components/schemas/TestDto2"
      responses:
        "200":
          description: OK
  /Test/T3:
    post:
      tags:
        - Test
      parameters:
        - name: x
          in: query
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TestDto"
          text/json:
            schema:
              $ref: "#/components/schemas/TestDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/TestDto"
        required: true
      responses:
        "200":
          description: OK
  /Test/T4:
    post:
      tags:
        - Test
      parameters:
        - name: x
          in: query
          schema:
            type: integer
            format: int32
            default: 2
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TestDto"
          text/json:
            schema:
              $ref: "#/components/schemas/TestDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/TestDto"
        required: true
      responses:
        "200":
          description: OK
  /Test/T5:
    post:
      tags:
        - Test
      parameters:
        - name: x
          in: query
          schema:
            type: integer
            format: int32
            default:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TestDto"
          text/json:
            schema:
              $ref: "#/components/schemas/TestDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/TestDto"
        required: true
      responses:
        "200":
          description: OK
  /Test/GetAnimal:
    get:
      tags:
        - Test
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Animal"
            application/json:
              schema:
                $ref: "#/components/schemas/Animal"
            text/json:
              schema:
                $ref: "#/components/schemas/Animal"
  /Test/PostAnimal:
    post:
      tags:
        - Test
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Animal"
          text/json:
            schema:
              $ref: "#/components/schemas/Animal"
          application/*+json:
            schema:
              $ref: "#/components/schemas/Animal"
        required: true
      responses:
        "200":
          description: OK
components:
  schemas:
    Animal:
      required:
        - species
      type: object
      anyOf:
        - $ref: "#/components/schemas/AnimalDog"
        - $ref: "#/components/schemas/AnimalCat"
      discriminator:
        propertyName: species
        mapping:
          Dog: "#/components/schemas/AnimalDog"
          Cat: "#/components/schemas/AnimalCat"
    AnimalCat:
      required:
        - name
      properties:
        species:
          enum:
            - Cat
          type: string
        name:
          type: string
    AnimalDog:
      required:
        - foo
      properties:
        species:
          enum:
            - Dog
          type: string
        foo:
          type: boolean
    KeyValuePairOfintAndTestDto:
      required:
        - key
        - value
      type: object
      properties:
        key:
          type: integer
          format: int32
        value:
          $ref: "#/components/schemas/TestDto2"
    TestDto:
      required:
        - x
        - z
        - y
      type: object
      properties:
        x:
          type: string
        z:
          type: integer
          format: int32
          nullable: true
        y:
          type: string
          nullable: true
    TestDto2:
      required:
        - x
        - z
        - y
      type: object
      properties:
        x:
          type: string
        z:
          type: integer
          format: int32
          nullable: true
        y:
          type: string
          nullable: true
      nullable: true
tags:
  - name: Test
